// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: market_data.proto
#ifndef GRPC_market_5fdata_2eproto__INCLUDED
#define GRPC_market_5fdata_2eproto__INCLUDED

#include "market_data.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace Proto3 {
namespace MarketData {

class MarketService final {
 public:
  static constexpr char const* service_full_name() {
    return "Proto3.MarketData.MarketService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo& request, ::Proto3::MarketData::HistKlineData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Proto3::MarketData::HistKlineData>> AsyncRequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Proto3::MarketData::HistKlineData>>(AsyncRequestHistKlineDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Proto3::MarketData::HistKlineData>> PrepareAsyncRequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Proto3::MarketData::HistKlineData>>(PrepareAsyncRequestHistKlineDataRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo& request, ::Proto3::MarketData::Trade* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Proto3::MarketData::Trade>> AsyncRequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Proto3::MarketData::Trade>>(AsyncRequestTradeDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Proto3::MarketData::Trade>> PrepareAsyncRequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Proto3::MarketData::Trade>>(PrepareAsyncRequestTradeDataRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void RequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo* request, ::Proto3::MarketData::HistKlineData* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo* request, ::Proto3::MarketData::HistKlineData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo* request, ::Proto3::MarketData::HistKlineData* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo* request, ::Proto3::MarketData::Trade* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo* request, ::Proto3::MarketData::Trade* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo* request, ::Proto3::MarketData::Trade* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Proto3::MarketData::HistKlineData>* AsyncRequestHistKlineDataRaw(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Proto3::MarketData::HistKlineData>* PrepareAsyncRequestHistKlineDataRaw(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Proto3::MarketData::Trade>* AsyncRequestTradeDataRaw(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Proto3::MarketData::Trade>* PrepareAsyncRequestTradeDataRaw(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo& request, ::Proto3::MarketData::HistKlineData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::HistKlineData>> AsyncRequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::HistKlineData>>(AsyncRequestHistKlineDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::HistKlineData>> PrepareAsyncRequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::HistKlineData>>(PrepareAsyncRequestHistKlineDataRaw(context, request, cq));
    }
    ::grpc::Status RequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo& request, ::Proto3::MarketData::Trade* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::Trade>> AsyncRequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::Trade>>(AsyncRequestTradeDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::Trade>> PrepareAsyncRequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::Trade>>(PrepareAsyncRequestTradeDataRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo* request, ::Proto3::MarketData::HistKlineData* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo* request, ::Proto3::MarketData::HistKlineData* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo* request, ::Proto3::MarketData::HistKlineData* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo* request, ::Proto3::MarketData::Trade* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo* request, ::Proto3::MarketData::Trade* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo* request, ::Proto3::MarketData::Trade* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::HistKlineData>* AsyncRequestHistKlineDataRaw(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::HistKlineData>* PrepareAsyncRequestHistKlineDataRaw(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::Trade>* AsyncRequestTradeDataRaw(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::Trade>* PrepareAsyncRequestTradeDataRaw(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestHistKlineData_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestTradeData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RequestHistKlineData(::grpc::ServerContext* context, const ::Proto3::MarketData::ReqHishKlineInfo* request, ::Proto3::MarketData::HistKlineData* response);
    virtual ::grpc::Status RequestTradeData(::grpc::ServerContext* context, const ::Proto3::MarketData::ReqTradeInfo* request, ::Proto3::MarketData::Trade* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestHistKlineData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestHistKlineData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestHistKlineData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestHistKlineData(::grpc::ServerContext* /*context*/, const ::Proto3::MarketData::ReqHishKlineInfo* /*request*/, ::Proto3::MarketData::HistKlineData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestHistKlineData(::grpc::ServerContext* context, ::Proto3::MarketData::ReqHishKlineInfo* request, ::grpc::ServerAsyncResponseWriter< ::Proto3::MarketData::HistKlineData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestTradeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestTradeData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RequestTradeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestTradeData(::grpc::ServerContext* /*context*/, const ::Proto3::MarketData::ReqTradeInfo* /*request*/, ::Proto3::MarketData::Trade* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestTradeData(::grpc::ServerContext* context, ::Proto3::MarketData::ReqTradeInfo* request, ::grpc::ServerAsyncResponseWriter< ::Proto3::MarketData::Trade>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestHistKlineData<WithAsyncMethod_RequestTradeData<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestHistKlineData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RequestHistKlineData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Proto3::MarketData::ReqHishKlineInfo, ::Proto3::MarketData::HistKlineData>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Proto3::MarketData::ReqHishKlineInfo* request, ::Proto3::MarketData::HistKlineData* response) { return this->RequestHistKlineData(context, request, response); }));}
    void SetMessageAllocatorFor_RequestHistKlineData(
        ::grpc::experimental::MessageAllocator< ::Proto3::MarketData::ReqHishKlineInfo, ::Proto3::MarketData::HistKlineData>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Proto3::MarketData::ReqHishKlineInfo, ::Proto3::MarketData::HistKlineData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RequestHistKlineData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestHistKlineData(::grpc::ServerContext* /*context*/, const ::Proto3::MarketData::ReqHishKlineInfo* /*request*/, ::Proto3::MarketData::HistKlineData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RequestHistKlineData(
      ::grpc::CallbackServerContext* /*context*/, const ::Proto3::MarketData::ReqHishKlineInfo* /*request*/, ::Proto3::MarketData::HistKlineData* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RequestHistKlineData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Proto3::MarketData::ReqHishKlineInfo* /*request*/, ::Proto3::MarketData::HistKlineData* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RequestTradeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RequestTradeData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Proto3::MarketData::ReqTradeInfo, ::Proto3::MarketData::Trade>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Proto3::MarketData::ReqTradeInfo* request, ::Proto3::MarketData::Trade* response) { return this->RequestTradeData(context, request, response); }));}
    void SetMessageAllocatorFor_RequestTradeData(
        ::grpc::experimental::MessageAllocator< ::Proto3::MarketData::ReqTradeInfo, ::Proto3::MarketData::Trade>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Proto3::MarketData::ReqTradeInfo, ::Proto3::MarketData::Trade>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RequestTradeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestTradeData(::grpc::ServerContext* /*context*/, const ::Proto3::MarketData::ReqTradeInfo* /*request*/, ::Proto3::MarketData::Trade* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RequestTradeData(
      ::grpc::CallbackServerContext* /*context*/, const ::Proto3::MarketData::ReqTradeInfo* /*request*/, ::Proto3::MarketData::Trade* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RequestTradeData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Proto3::MarketData::ReqTradeInfo* /*request*/, ::Proto3::MarketData::Trade* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RequestHistKlineData<ExperimentalWithCallbackMethod_RequestTradeData<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RequestHistKlineData<ExperimentalWithCallbackMethod_RequestTradeData<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestHistKlineData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestHistKlineData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestHistKlineData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestHistKlineData(::grpc::ServerContext* /*context*/, const ::Proto3::MarketData::ReqHishKlineInfo* /*request*/, ::Proto3::MarketData::HistKlineData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestTradeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestTradeData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RequestTradeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestTradeData(::grpc::ServerContext* /*context*/, const ::Proto3::MarketData::ReqTradeInfo* /*request*/, ::Proto3::MarketData::Trade* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestHistKlineData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestHistKlineData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestHistKlineData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestHistKlineData(::grpc::ServerContext* /*context*/, const ::Proto3::MarketData::ReqHishKlineInfo* /*request*/, ::Proto3::MarketData::HistKlineData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestHistKlineData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestTradeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestTradeData() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RequestTradeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestTradeData(::grpc::ServerContext* /*context*/, const ::Proto3::MarketData::ReqTradeInfo* /*request*/, ::Proto3::MarketData::Trade* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestTradeData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestHistKlineData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestHistKlineData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestHistKlineData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestHistKlineData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestHistKlineData(::grpc::ServerContext* /*context*/, const ::Proto3::MarketData::ReqHishKlineInfo* /*request*/, ::Proto3::MarketData::HistKlineData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RequestHistKlineData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RequestHistKlineData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RequestTradeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RequestTradeData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestTradeData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RequestTradeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestTradeData(::grpc::ServerContext* /*context*/, const ::Proto3::MarketData::ReqTradeInfo* /*request*/, ::Proto3::MarketData::Trade* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RequestTradeData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RequestTradeData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestHistKlineData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestHistKlineData() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Proto3::MarketData::ReqHishKlineInfo, ::Proto3::MarketData::HistKlineData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Proto3::MarketData::ReqHishKlineInfo, ::Proto3::MarketData::HistKlineData>* streamer) {
                       return this->StreamedRequestHistKlineData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestHistKlineData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestHistKlineData(::grpc::ServerContext* /*context*/, const ::Proto3::MarketData::ReqHishKlineInfo* /*request*/, ::Proto3::MarketData::HistKlineData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestHistKlineData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Proto3::MarketData::ReqHishKlineInfo,::Proto3::MarketData::HistKlineData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestTradeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestTradeData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Proto3::MarketData::ReqTradeInfo, ::Proto3::MarketData::Trade>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Proto3::MarketData::ReqTradeInfo, ::Proto3::MarketData::Trade>* streamer) {
                       return this->StreamedRequestTradeData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestTradeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestTradeData(::grpc::ServerContext* /*context*/, const ::Proto3::MarketData::ReqTradeInfo* /*request*/, ::Proto3::MarketData::Trade* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestTradeData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Proto3::MarketData::ReqTradeInfo,::Proto3::MarketData::Trade>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestHistKlineData<WithStreamedUnaryMethod_RequestTradeData<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestHistKlineData<WithStreamedUnaryMethod_RequestTradeData<Service > > StreamedService;
};
// 服务名字还是用 MarketService, 整个行情系统都要用；

}  // namespace MarketData
}  // namespace Proto3


#endif  // GRPC_market_5fdata_2eproto__INCLUDED
