// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: market_data.proto

#include "market_data.pb.h"
#include "market_data.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Proto3 {
namespace MarketData {

static const char* MarketService_method_names[] = {
  "/Proto3.MarketData.MarketService/RequestHistKlineData",
  "/Proto3.MarketData.MarketService/RequestTradeData",
};

std::unique_ptr< MarketService::Stub> MarketService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MarketService::Stub> stub(new MarketService::Stub(channel));
  return stub;
}

MarketService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RequestHistKlineData_(MarketService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestTradeData_(MarketService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MarketService::Stub::RequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo& request, ::Proto3::MarketData::HistKlineData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Proto3::MarketData::ReqHishKlineInfo, ::Proto3::MarketData::HistKlineData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestHistKlineData_, context, request, response);
}

void MarketService::Stub::experimental_async::RequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo* request, ::Proto3::MarketData::HistKlineData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Proto3::MarketData::ReqHishKlineInfo, ::Proto3::MarketData::HistKlineData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestHistKlineData_, context, request, response, std::move(f));
}

void MarketService::Stub::experimental_async::RequestHistKlineData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo* request, ::Proto3::MarketData::HistKlineData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestHistKlineData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::HistKlineData>* MarketService::Stub::PrepareAsyncRequestHistKlineDataRaw(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Proto3::MarketData::HistKlineData, ::Proto3::MarketData::ReqHishKlineInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestHistKlineData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::HistKlineData>* MarketService::Stub::AsyncRequestHistKlineDataRaw(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqHishKlineInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestHistKlineDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MarketService::Stub::RequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo& request, ::Proto3::MarketData::Trade* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Proto3::MarketData::ReqTradeInfo, ::Proto3::MarketData::Trade, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestTradeData_, context, request, response);
}

void MarketService::Stub::experimental_async::RequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo* request, ::Proto3::MarketData::Trade* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Proto3::MarketData::ReqTradeInfo, ::Proto3::MarketData::Trade, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestTradeData_, context, request, response, std::move(f));
}

void MarketService::Stub::experimental_async::RequestTradeData(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo* request, ::Proto3::MarketData::Trade* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestTradeData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::Trade>* MarketService::Stub::PrepareAsyncRequestTradeDataRaw(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Proto3::MarketData::Trade, ::Proto3::MarketData::ReqTradeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestTradeData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Proto3::MarketData::Trade>* MarketService::Stub::AsyncRequestTradeDataRaw(::grpc::ClientContext* context, const ::Proto3::MarketData::ReqTradeInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestTradeDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

MarketService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketService::Service, ::Proto3::MarketData::ReqHishKlineInfo, ::Proto3::MarketData::HistKlineData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Proto3::MarketData::ReqHishKlineInfo* req,
             ::Proto3::MarketData::HistKlineData* resp) {
               return service->RequestHistKlineData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MarketService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MarketService::Service, ::Proto3::MarketData::ReqTradeInfo, ::Proto3::MarketData::Trade, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MarketService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Proto3::MarketData::ReqTradeInfo* req,
             ::Proto3::MarketData::Trade* resp) {
               return service->RequestTradeData(ctx, req, resp);
             }, this)));
}

MarketService::Service::~Service() {
}

::grpc::Status MarketService::Service::RequestHistKlineData(::grpc::ServerContext* context, const ::Proto3::MarketData::ReqHishKlineInfo* request, ::Proto3::MarketData::HistKlineData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MarketService::Service::RequestTradeData(::grpc::ServerContext* context, const ::Proto3::MarketData::ReqTradeInfo* request, ::Proto3::MarketData::Trade* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Proto3
}  // namespace MarketData

