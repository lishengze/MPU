// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_market_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_market_5fdata_2eproto;
namespace Proto3 {
namespace MarketData {
class Depth;
class DepthDefaultTypeInternal;
extern DepthDefaultTypeInternal _Depth_default_instance_;
class EmptyReq;
class EmptyReqDefaultTypeInternal;
extern EmptyReqDefaultTypeInternal _EmptyReq_default_instance_;
class EmptyRsp;
class EmptyRspDefaultTypeInternal;
extern EmptyRspDefaultTypeInternal _EmptyRsp_default_instance_;
class HistKlineData;
class HistKlineDataDefaultTypeInternal;
extern HistKlineDataDefaultTypeInternal _HistKlineData_default_instance_;
class Kline;
class KlineDefaultTypeInternal;
extern KlineDefaultTypeInternal _Kline_default_instance_;
class PriceVolume;
class PriceVolumeDefaultTypeInternal;
extern PriceVolumeDefaultTypeInternal _PriceVolume_default_instance_;
class ReqHishKlineInfo;
class ReqHishKlineInfoDefaultTypeInternal;
extern ReqHishKlineInfoDefaultTypeInternal _ReqHishKlineInfo_default_instance_;
class ReqTradeInfo;
class ReqTradeInfoDefaultTypeInternal;
extern ReqTradeInfoDefaultTypeInternal _ReqTradeInfo_default_instance_;
class Trade;
class TradeDefaultTypeInternal;
extern TradeDefaultTypeInternal _Trade_default_instance_;
}  // namespace MarketData
}  // namespace Proto3
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto3::MarketData::Depth* Arena::CreateMaybeMessage<::Proto3::MarketData::Depth>(Arena*);
template<> ::Proto3::MarketData::EmptyReq* Arena::CreateMaybeMessage<::Proto3::MarketData::EmptyReq>(Arena*);
template<> ::Proto3::MarketData::EmptyRsp* Arena::CreateMaybeMessage<::Proto3::MarketData::EmptyRsp>(Arena*);
template<> ::Proto3::MarketData::HistKlineData* Arena::CreateMaybeMessage<::Proto3::MarketData::HistKlineData>(Arena*);
template<> ::Proto3::MarketData::Kline* Arena::CreateMaybeMessage<::Proto3::MarketData::Kline>(Arena*);
template<> ::Proto3::MarketData::PriceVolume* Arena::CreateMaybeMessage<::Proto3::MarketData::PriceVolume>(Arena*);
template<> ::Proto3::MarketData::ReqHishKlineInfo* Arena::CreateMaybeMessage<::Proto3::MarketData::ReqHishKlineInfo>(Arena*);
template<> ::Proto3::MarketData::ReqTradeInfo* Arena::CreateMaybeMessage<::Proto3::MarketData::ReqTradeInfo>(Arena*);
template<> ::Proto3::MarketData::Trade* Arena::CreateMaybeMessage<::Proto3::MarketData::Trade>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto3 {
namespace MarketData {

// ===================================================================

class PriceVolume PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3.MarketData.PriceVolume) */ {
 public:
  inline PriceVolume() : PriceVolume(nullptr) {}
  virtual ~PriceVolume();

  PriceVolume(const PriceVolume& from);
  PriceVolume(PriceVolume&& from) noexcept
    : PriceVolume() {
    *this = ::std::move(from);
  }

  inline PriceVolume& operator=(const PriceVolume& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceVolume& operator=(PriceVolume&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceVolume& default_instance();

  static inline const PriceVolume* internal_default_instance() {
    return reinterpret_cast<const PriceVolume*>(
               &_PriceVolume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PriceVolume& a, PriceVolume& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceVolume* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceVolume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceVolume* New() const final {
    return CreateMaybeMessage<PriceVolume>(nullptr);
  }

  PriceVolume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceVolume>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceVolume& from);
  void MergeFrom(const PriceVolume& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceVolume* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3.MarketData.PriceVolume";
  }
  protected:
  explicit PriceVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kVolumeFieldNumber = 2,
  };
  // string price = 1;
  void clear_price();
  const std::string& price() const;
  void set_price(const std::string& value);
  void set_price(std::string&& value);
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  std::string* mutable_price();
  std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // string volume = 2;
  void clear_volume();
  const std::string& volume() const;
  void set_volume(const std::string& value);
  void set_volume(std::string&& value);
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  std::string* mutable_volume();
  std::string* release_volume();
  void set_allocated_volume(std::string* volume);
  private:
  const std::string& _internal_volume() const;
  void _internal_set_volume(const std::string& value);
  std::string* _internal_mutable_volume();
  public:

  // @@protoc_insertion_point(class_scope:Proto3.MarketData.PriceVolume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Depth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3.MarketData.Depth) */ {
 public:
  inline Depth() : Depth(nullptr) {}
  virtual ~Depth();

  Depth(const Depth& from);
  Depth(Depth&& from) noexcept
    : Depth() {
    *this = ::std::move(from);
  }

  inline Depth& operator=(const Depth& from) {
    CopyFrom(from);
    return *this;
  }
  inline Depth& operator=(Depth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Depth& default_instance();

  static inline const Depth* internal_default_instance() {
    return reinterpret_cast<const Depth*>(
               &_Depth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Depth& a, Depth& b) {
    a.Swap(&b);
  }
  inline void Swap(Depth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Depth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Depth* New() const final {
    return CreateMaybeMessage<Depth>(nullptr);
  }

  Depth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Depth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Depth& from);
  void MergeFrom(const Depth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Depth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3.MarketData.Depth";
  }
  protected:
  explicit Depth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsksFieldNumber = 4,
    kBidsFieldNumber = 5,
    kExchangeFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kMpuTimestampFieldNumber = 6,
    kSequenceFieldNumber = 7,
  };
  // repeated .Proto3.MarketData.PriceVolume asks = 4;
  int asks_size() const;
  private:
  int _internal_asks_size() const;
  public:
  void clear_asks();
  ::Proto3::MarketData::PriceVolume* mutable_asks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::PriceVolume >*
      mutable_asks();
  private:
  const ::Proto3::MarketData::PriceVolume& _internal_asks(int index) const;
  ::Proto3::MarketData::PriceVolume* _internal_add_asks();
  public:
  const ::Proto3::MarketData::PriceVolume& asks(int index) const;
  ::Proto3::MarketData::PriceVolume* add_asks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::PriceVolume >&
      asks() const;

  // repeated .Proto3.MarketData.PriceVolume bids = 5;
  int bids_size() const;
  private:
  int _internal_bids_size() const;
  public:
  void clear_bids();
  ::Proto3::MarketData::PriceVolume* mutable_bids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::PriceVolume >*
      mutable_bids();
  private:
  const ::Proto3::MarketData::PriceVolume& _internal_bids(int index) const;
  ::Proto3::MarketData::PriceVolume* _internal_add_bids();
  public:
  const ::Proto3::MarketData::PriceVolume& bids(int index) const;
  ::Proto3::MarketData::PriceVolume* add_bids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::PriceVolume >&
      bids() const;

  // string exchange = 2;
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .google.protobuf.Timestamp mpu_timestamp = 6;
  bool has_mpu_timestamp() const;
  private:
  bool _internal_has_mpu_timestamp() const;
  public:
  void clear_mpu_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& mpu_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_mpu_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_mpu_timestamp();
  void set_allocated_mpu_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* mpu_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_mpu_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_mpu_timestamp();
  public:
  void unsafe_arena_set_allocated_mpu_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* mpu_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_mpu_timestamp();

  // uint64 sequence = 7;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3.MarketData.Depth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::PriceVolume > asks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::PriceVolume > bids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* mpu_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Trade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3.MarketData.Trade) */ {
 public:
  inline Trade() : Trade(nullptr) {}
  virtual ~Trade();

  Trade(const Trade& from);
  Trade(Trade&& from) noexcept
    : Trade() {
    *this = ::std::move(from);
  }

  inline Trade& operator=(const Trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trade& operator=(Trade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trade& default_instance();

  static inline const Trade* internal_default_instance() {
    return reinterpret_cast<const Trade*>(
               &_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Trade& a, Trade& b) {
    a.Swap(&b);
  }
  inline void Swap(Trade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trade* New() const final {
    return CreateMaybeMessage<Trade>(nullptr);
  }

  Trade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trade& from);
  void MergeFrom(const Trade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3.MarketData.Trade";
  }
  protected:
  explicit Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kPriceFieldNumber = 4,
    kVolumeFieldNumber = 5,
    kTimestampFieldNumber = 1,
    kSequenceFieldNumber = 6,
  };
  // string exchange = 2;
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string price = 4;
  void clear_price();
  const std::string& price() const;
  void set_price(const std::string& value);
  void set_price(std::string&& value);
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  std::string* mutable_price();
  std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // string volume = 5;
  void clear_volume();
  const std::string& volume() const;
  void set_volume(const std::string& value);
  void set_volume(std::string&& value);
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  std::string* mutable_volume();
  std::string* release_volume();
  void set_allocated_volume(std::string* volume);
  private:
  const std::string& _internal_volume() const;
  void _internal_set_volume(const std::string& value);
  std::string* _internal_mutable_volume();
  public:

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // uint64 sequence = 6;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3.MarketData.Trade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Kline PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3.MarketData.Kline) */ {
 public:
  inline Kline() : Kline(nullptr) {}
  virtual ~Kline();

  Kline(const Kline& from);
  Kline(Kline&& from) noexcept
    : Kline() {
    *this = ::std::move(from);
  }

  inline Kline& operator=(const Kline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kline& operator=(Kline&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Kline& default_instance();

  static inline const Kline* internal_default_instance() {
    return reinterpret_cast<const Kline*>(
               &_Kline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Kline& a, Kline& b) {
    a.Swap(&b);
  }
  inline void Swap(Kline* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Kline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Kline* New() const final {
    return CreateMaybeMessage<Kline>(nullptr);
  }

  Kline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Kline>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Kline& from);
  void MergeFrom(const Kline& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Kline* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3.MarketData.Kline";
  }
  protected:
  explicit Kline(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeFieldNumber = 2,
    kSymbolFieldNumber = 3,
    kOpenFieldNumber = 4,
    kHighFieldNumber = 5,
    kLowFieldNumber = 6,
    kCloseFieldNumber = 7,
    kVolumeFieldNumber = 8,
    kValueFieldNumber = 9,
    kLastvolumeFieldNumber = 12,
    kTimestampFieldNumber = 1,
    kSequenceFieldNumber = 11,
    kResolutionFieldNumber = 10,
  };
  // string exchange = 2;
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string symbol = 3;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string open = 4;
  void clear_open();
  const std::string& open() const;
  void set_open(const std::string& value);
  void set_open(std::string&& value);
  void set_open(const char* value);
  void set_open(const char* value, size_t size);
  std::string* mutable_open();
  std::string* release_open();
  void set_allocated_open(std::string* open);
  private:
  const std::string& _internal_open() const;
  void _internal_set_open(const std::string& value);
  std::string* _internal_mutable_open();
  public:

  // string high = 5;
  void clear_high();
  const std::string& high() const;
  void set_high(const std::string& value);
  void set_high(std::string&& value);
  void set_high(const char* value);
  void set_high(const char* value, size_t size);
  std::string* mutable_high();
  std::string* release_high();
  void set_allocated_high(std::string* high);
  private:
  const std::string& _internal_high() const;
  void _internal_set_high(const std::string& value);
  std::string* _internal_mutable_high();
  public:

  // string low = 6;
  void clear_low();
  const std::string& low() const;
  void set_low(const std::string& value);
  void set_low(std::string&& value);
  void set_low(const char* value);
  void set_low(const char* value, size_t size);
  std::string* mutable_low();
  std::string* release_low();
  void set_allocated_low(std::string* low);
  private:
  const std::string& _internal_low() const;
  void _internal_set_low(const std::string& value);
  std::string* _internal_mutable_low();
  public:

  // string close = 7;
  void clear_close();
  const std::string& close() const;
  void set_close(const std::string& value);
  void set_close(std::string&& value);
  void set_close(const char* value);
  void set_close(const char* value, size_t size);
  std::string* mutable_close();
  std::string* release_close();
  void set_allocated_close(std::string* close);
  private:
  const std::string& _internal_close() const;
  void _internal_set_close(const std::string& value);
  std::string* _internal_mutable_close();
  public:

  // string volume = 8;
  void clear_volume();
  const std::string& volume() const;
  void set_volume(const std::string& value);
  void set_volume(std::string&& value);
  void set_volume(const char* value);
  void set_volume(const char* value, size_t size);
  std::string* mutable_volume();
  std::string* release_volume();
  void set_allocated_volume(std::string* volume);
  private:
  const std::string& _internal_volume() const;
  void _internal_set_volume(const std::string& value);
  std::string* _internal_mutable_volume();
  public:

  // string value = 9;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string lastvolume = 12;
  void clear_lastvolume();
  const std::string& lastvolume() const;
  void set_lastvolume(const std::string& value);
  void set_lastvolume(std::string&& value);
  void set_lastvolume(const char* value);
  void set_lastvolume(const char* value, size_t size);
  std::string* mutable_lastvolume();
  std::string* release_lastvolume();
  void set_allocated_lastvolume(std::string* lastvolume);
  private:
  const std::string& _internal_lastvolume() const;
  void _internal_set_lastvolume(const std::string& value);
  std::string* _internal_mutable_lastvolume();
  public:

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // uint64 sequence = 11;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 resolution = 10;
  void clear_resolution();
  ::PROTOBUF_NAMESPACE_ID::uint32 resolution() const;
  void set_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_resolution() const;
  void _internal_set_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3.MarketData.Kline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr high_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr low_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr close_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastvolume_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 resolution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class HistKlineData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3.MarketData.HistKlineData) */ {
 public:
  inline HistKlineData() : HistKlineData(nullptr) {}
  virtual ~HistKlineData();

  HistKlineData(const HistKlineData& from);
  HistKlineData(HistKlineData&& from) noexcept
    : HistKlineData() {
    *this = ::std::move(from);
  }

  inline HistKlineData& operator=(const HistKlineData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistKlineData& operator=(HistKlineData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistKlineData& default_instance();

  static inline const HistKlineData* internal_default_instance() {
    return reinterpret_cast<const HistKlineData*>(
               &_HistKlineData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HistKlineData& a, HistKlineData& b) {
    a.Swap(&b);
  }
  inline void Swap(HistKlineData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistKlineData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistKlineData* New() const final {
    return CreateMaybeMessage<HistKlineData>(nullptr);
  }

  HistKlineData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistKlineData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistKlineData& from);
  void MergeFrom(const HistKlineData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistKlineData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3.MarketData.HistKlineData";
  }
  protected:
  explicit HistKlineData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKlineDataFieldNumber = 7,
    kSymbolFieldNumber = 1,
    kExchangeFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kCountFieldNumber = 5,
    kFrequencyFieldNumber = 6,
  };
  // repeated .Proto3.MarketData.Kline kline_data = 7;
  int kline_data_size() const;
  private:
  int _internal_kline_data_size() const;
  public:
  void clear_kline_data();
  ::Proto3::MarketData::Kline* mutable_kline_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Kline >*
      mutable_kline_data();
  private:
  const ::Proto3::MarketData::Kline& _internal_kline_data(int index) const;
  ::Proto3::MarketData::Kline* _internal_add_kline_data();
  public:
  const ::Proto3::MarketData::Kline& kline_data(int index) const;
  ::Proto3::MarketData::Kline* add_kline_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Kline >&
      kline_data() const;

  // string symbol = 1;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string exchange = 2;
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // uint64 start_time = 3;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end_time = 4;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 count = 5;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 frequency = 6;
  void clear_frequency();
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency() const;
  void set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frequency() const;
  void _internal_set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3.MarketData.HistKlineData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Kline > kline_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class EmptyReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3.MarketData.EmptyReq) */ {
 public:
  inline EmptyReq() : EmptyReq(nullptr) {}
  virtual ~EmptyReq();

  EmptyReq(const EmptyReq& from);
  EmptyReq(EmptyReq&& from) noexcept
    : EmptyReq() {
    *this = ::std::move(from);
  }

  inline EmptyReq& operator=(const EmptyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyReq& operator=(EmptyReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyReq& default_instance();

  static inline const EmptyReq* internal_default_instance() {
    return reinterpret_cast<const EmptyReq*>(
               &_EmptyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EmptyReq& a, EmptyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyReq* New() const final {
    return CreateMaybeMessage<EmptyReq>(nullptr);
  }

  EmptyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyReq& from);
  void MergeFrom(const EmptyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3.MarketData.EmptyReq";
  }
  protected:
  explicit EmptyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto3.MarketData.EmptyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class EmptyRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3.MarketData.EmptyRsp) */ {
 public:
  inline EmptyRsp() : EmptyRsp(nullptr) {}
  virtual ~EmptyRsp();

  EmptyRsp(const EmptyRsp& from);
  EmptyRsp(EmptyRsp&& from) noexcept
    : EmptyRsp() {
    *this = ::std::move(from);
  }

  inline EmptyRsp& operator=(const EmptyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyRsp& operator=(EmptyRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyRsp& default_instance();

  static inline const EmptyRsp* internal_default_instance() {
    return reinterpret_cast<const EmptyRsp*>(
               &_EmptyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EmptyRsp& a, EmptyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyRsp* New() const final {
    return CreateMaybeMessage<EmptyRsp>(nullptr);
  }

  EmptyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyRsp& from);
  void MergeFrom(const EmptyRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3.MarketData.EmptyRsp";
  }
  protected:
  explicit EmptyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto3.MarketData.EmptyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class ReqHishKlineInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3.MarketData.ReqHishKlineInfo) */ {
 public:
  inline ReqHishKlineInfo() : ReqHishKlineInfo(nullptr) {}
  virtual ~ReqHishKlineInfo();

  ReqHishKlineInfo(const ReqHishKlineInfo& from);
  ReqHishKlineInfo(ReqHishKlineInfo&& from) noexcept
    : ReqHishKlineInfo() {
    *this = ::std::move(from);
  }

  inline ReqHishKlineInfo& operator=(const ReqHishKlineInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqHishKlineInfo& operator=(ReqHishKlineInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqHishKlineInfo& default_instance();

  static inline const ReqHishKlineInfo* internal_default_instance() {
    return reinterpret_cast<const ReqHishKlineInfo*>(
               &_ReqHishKlineInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReqHishKlineInfo& a, ReqHishKlineInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqHishKlineInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqHishKlineInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqHishKlineInfo* New() const final {
    return CreateMaybeMessage<ReqHishKlineInfo>(nullptr);
  }

  ReqHishKlineInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqHishKlineInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqHishKlineInfo& from);
  void MergeFrom(const ReqHishKlineInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqHishKlineInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3.MarketData.ReqHishKlineInfo";
  }
  protected:
  explicit ReqHishKlineInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kExchangeFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kCountFieldNumber = 5,
    kFrequencyFieldNumber = 6,
  };
  // string symbol = 1;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string exchange = 2;
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // uint64 start_time = 3;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end_time = 4;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 count = 5;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 frequency = 6;
  void clear_frequency();
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency() const;
  void set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frequency() const;
  void _internal_set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3.MarketData.ReqHishKlineInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class ReqTradeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3.MarketData.ReqTradeInfo) */ {
 public:
  inline ReqTradeInfo() : ReqTradeInfo(nullptr) {}
  virtual ~ReqTradeInfo();

  ReqTradeInfo(const ReqTradeInfo& from);
  ReqTradeInfo(ReqTradeInfo&& from) noexcept
    : ReqTradeInfo() {
    *this = ::std::move(from);
  }

  inline ReqTradeInfo& operator=(const ReqTradeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTradeInfo& operator=(ReqTradeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqTradeInfo& default_instance();

  static inline const ReqTradeInfo* internal_default_instance() {
    return reinterpret_cast<const ReqTradeInfo*>(
               &_ReqTradeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReqTradeInfo& a, ReqTradeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqTradeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTradeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqTradeInfo* New() const final {
    return CreateMaybeMessage<ReqTradeInfo>(nullptr);
  }

  ReqTradeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqTradeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqTradeInfo& from);
  void MergeFrom(const ReqTradeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTradeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3.MarketData.ReqTradeInfo";
  }
  protected:
  explicit ReqTradeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kExchangeFieldNumber = 2,
    kTimeFieldNumber = 3,
    kStartTimeFieldNumber = 5,
    kEndTimeFieldNumber = 6,
    kCountFieldNumber = 7,
  };
  // string symbol = 1;
  void clear_symbol();
  const std::string& symbol() const;
  void set_symbol(const std::string& value);
  void set_symbol(std::string&& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  std::string* mutable_symbol();
  std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string exchange = 2;
  void clear_exchange();
  const std::string& exchange() const;
  void set_exchange(const std::string& value);
  void set_exchange(std::string&& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  std::string* mutable_exchange();
  std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // uint64 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 start_time = 5;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end_time = 6;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 count = 7;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3.MarketData.ReqTradeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PriceVolume

// string price = 1;
inline void PriceVolume::clear_price() {
  price_.ClearToEmpty();
}
inline const std::string& PriceVolume::price() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.PriceVolume.price)
  return _internal_price();
}
inline void PriceVolume::set_price(const std::string& value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.PriceVolume.price)
}
inline std::string* PriceVolume::mutable_price() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.PriceVolume.price)
  return _internal_mutable_price();
}
inline const std::string& PriceVolume::_internal_price() const {
  return price_.Get();
}
inline void PriceVolume::_internal_set_price(const std::string& value) {
  
  price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PriceVolume::set_price(std::string&& value) {
  
  price_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.PriceVolume.price)
}
inline void PriceVolume::set_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.PriceVolume.price)
}
inline void PriceVolume::set_price(const char* value,
    size_t size) {
  
  price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.PriceVolume.price)
}
inline std::string* PriceVolume::_internal_mutable_price() {
  
  return price_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PriceVolume::release_price() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.PriceVolume.price)
  return price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PriceVolume::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.PriceVolume.price)
}

// string volume = 2;
inline void PriceVolume::clear_volume() {
  volume_.ClearToEmpty();
}
inline const std::string& PriceVolume::volume() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.PriceVolume.volume)
  return _internal_volume();
}
inline void PriceVolume::set_volume(const std::string& value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.PriceVolume.volume)
}
inline std::string* PriceVolume::mutable_volume() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.PriceVolume.volume)
  return _internal_mutable_volume();
}
inline const std::string& PriceVolume::_internal_volume() const {
  return volume_.Get();
}
inline void PriceVolume::_internal_set_volume(const std::string& value) {
  
  volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PriceVolume::set_volume(std::string&& value) {
  
  volume_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.PriceVolume.volume)
}
inline void PriceVolume::set_volume(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.PriceVolume.volume)
}
inline void PriceVolume::set_volume(const char* value,
    size_t size) {
  
  volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.PriceVolume.volume)
}
inline std::string* PriceVolume::_internal_mutable_volume() {
  
  return volume_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PriceVolume::release_volume() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.PriceVolume.volume)
  return volume_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PriceVolume::set_allocated_volume(std::string* volume) {
  if (volume != nullptr) {
    
  } else {
    
  }
  volume_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.PriceVolume.volume)
}

// -------------------------------------------------------------------

// Depth

// .google.protobuf.Timestamp timestamp = 1;
inline bool Depth::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Depth::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Depth::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Depth::timestamp() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Depth.timestamp)
  return _internal_timestamp();
}
inline void Depth::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto3.MarketData.Depth.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Depth::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Depth::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Depth.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Depth::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Depth::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Depth.timestamp)
  return _internal_mutable_timestamp();
}
inline void Depth::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Depth.timestamp)
}

// string exchange = 2;
inline void Depth::clear_exchange() {
  exchange_.ClearToEmpty();
}
inline const std::string& Depth::exchange() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Depth.exchange)
  return _internal_exchange();
}
inline void Depth::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Depth.exchange)
}
inline std::string* Depth::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Depth.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& Depth::_internal_exchange() const {
  return exchange_.Get();
}
inline void Depth::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Depth::set_exchange(std::string&& value) {
  
  exchange_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Depth.exchange)
}
inline void Depth::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Depth.exchange)
}
inline void Depth::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Depth.exchange)
}
inline std::string* Depth::_internal_mutable_exchange() {
  
  return exchange_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Depth::release_exchange() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Depth.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Depth::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Depth.exchange)
}

// string symbol = 3;
inline void Depth::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& Depth::symbol() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Depth.symbol)
  return _internal_symbol();
}
inline void Depth::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Depth.symbol)
}
inline std::string* Depth::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Depth.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& Depth::_internal_symbol() const {
  return symbol_.Get();
}
inline void Depth::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Depth::set_symbol(std::string&& value) {
  
  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Depth.symbol)
}
inline void Depth::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Depth.symbol)
}
inline void Depth::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Depth.symbol)
}
inline std::string* Depth::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Depth::release_symbol() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Depth.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Depth::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Depth.symbol)
}

// repeated .Proto3.MarketData.PriceVolume asks = 4;
inline int Depth::_internal_asks_size() const {
  return asks_.size();
}
inline int Depth::asks_size() const {
  return _internal_asks_size();
}
inline void Depth::clear_asks() {
  asks_.Clear();
}
inline ::Proto3::MarketData::PriceVolume* Depth::mutable_asks(int index) {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Depth.asks)
  return asks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::PriceVolume >*
Depth::mutable_asks() {
  // @@protoc_insertion_point(field_mutable_list:Proto3.MarketData.Depth.asks)
  return &asks_;
}
inline const ::Proto3::MarketData::PriceVolume& Depth::_internal_asks(int index) const {
  return asks_.Get(index);
}
inline const ::Proto3::MarketData::PriceVolume& Depth::asks(int index) const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Depth.asks)
  return _internal_asks(index);
}
inline ::Proto3::MarketData::PriceVolume* Depth::_internal_add_asks() {
  return asks_.Add();
}
inline ::Proto3::MarketData::PriceVolume* Depth::add_asks() {
  // @@protoc_insertion_point(field_add:Proto3.MarketData.Depth.asks)
  return _internal_add_asks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::PriceVolume >&
Depth::asks() const {
  // @@protoc_insertion_point(field_list:Proto3.MarketData.Depth.asks)
  return asks_;
}

// repeated .Proto3.MarketData.PriceVolume bids = 5;
inline int Depth::_internal_bids_size() const {
  return bids_.size();
}
inline int Depth::bids_size() const {
  return _internal_bids_size();
}
inline void Depth::clear_bids() {
  bids_.Clear();
}
inline ::Proto3::MarketData::PriceVolume* Depth::mutable_bids(int index) {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Depth.bids)
  return bids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::PriceVolume >*
Depth::mutable_bids() {
  // @@protoc_insertion_point(field_mutable_list:Proto3.MarketData.Depth.bids)
  return &bids_;
}
inline const ::Proto3::MarketData::PriceVolume& Depth::_internal_bids(int index) const {
  return bids_.Get(index);
}
inline const ::Proto3::MarketData::PriceVolume& Depth::bids(int index) const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Depth.bids)
  return _internal_bids(index);
}
inline ::Proto3::MarketData::PriceVolume* Depth::_internal_add_bids() {
  return bids_.Add();
}
inline ::Proto3::MarketData::PriceVolume* Depth::add_bids() {
  // @@protoc_insertion_point(field_add:Proto3.MarketData.Depth.bids)
  return _internal_add_bids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::PriceVolume >&
Depth::bids() const {
  // @@protoc_insertion_point(field_list:Proto3.MarketData.Depth.bids)
  return bids_;
}

// .google.protobuf.Timestamp mpu_timestamp = 6;
inline bool Depth::_internal_has_mpu_timestamp() const {
  return this != internal_default_instance() && mpu_timestamp_ != nullptr;
}
inline bool Depth::has_mpu_timestamp() const {
  return _internal_has_mpu_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Depth::_internal_mpu_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = mpu_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Depth::mpu_timestamp() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Depth.mpu_timestamp)
  return _internal_mpu_timestamp();
}
inline void Depth::unsafe_arena_set_allocated_mpu_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* mpu_timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mpu_timestamp_);
  }
  mpu_timestamp_ = mpu_timestamp;
  if (mpu_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto3.MarketData.Depth.mpu_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Depth::release_mpu_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = mpu_timestamp_;
  mpu_timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Depth::unsafe_arena_release_mpu_timestamp() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Depth.mpu_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = mpu_timestamp_;
  mpu_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Depth::_internal_mutable_mpu_timestamp() {
  
  if (mpu_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    mpu_timestamp_ = p;
  }
  return mpu_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Depth::mutable_mpu_timestamp() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Depth.mpu_timestamp)
  return _internal_mutable_mpu_timestamp();
}
inline void Depth::set_allocated_mpu_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* mpu_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mpu_timestamp_);
  }
  if (mpu_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mpu_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      mpu_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mpu_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  mpu_timestamp_ = mpu_timestamp;
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Depth.mpu_timestamp)
}

// uint64 sequence = 7;
inline void Depth::clear_sequence() {
  sequence_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Depth::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Depth::sequence() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Depth.sequence)
  return _internal_sequence();
}
inline void Depth::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_ = value;
}
inline void Depth::set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Depth.sequence)
}

// -------------------------------------------------------------------

// Trade

// .google.protobuf.Timestamp timestamp = 1;
inline bool Trade::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Trade::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Trade::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Trade::timestamp() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Trade.timestamp)
  return _internal_timestamp();
}
inline void Trade::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto3.MarketData.Trade.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Trade::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Trade::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Trade.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Trade::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Trade::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Trade.timestamp)
  return _internal_mutable_timestamp();
}
inline void Trade::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Trade.timestamp)
}

// string exchange = 2;
inline void Trade::clear_exchange() {
  exchange_.ClearToEmpty();
}
inline const std::string& Trade::exchange() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Trade.exchange)
  return _internal_exchange();
}
inline void Trade::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Trade.exchange)
}
inline std::string* Trade::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Trade.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& Trade::_internal_exchange() const {
  return exchange_.Get();
}
inline void Trade::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_exchange(std::string&& value) {
  
  exchange_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Trade.exchange)
}
inline void Trade::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Trade.exchange)
}
inline void Trade::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Trade.exchange)
}
inline std::string* Trade::_internal_mutable_exchange() {
  
  return exchange_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_exchange() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Trade.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Trade.exchange)
}

// string symbol = 3;
inline void Trade::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& Trade::symbol() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Trade.symbol)
  return _internal_symbol();
}
inline void Trade::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Trade.symbol)
}
inline std::string* Trade::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Trade.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& Trade::_internal_symbol() const {
  return symbol_.Get();
}
inline void Trade::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_symbol(std::string&& value) {
  
  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Trade.symbol)
}
inline void Trade::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Trade.symbol)
}
inline void Trade::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Trade.symbol)
}
inline std::string* Trade::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_symbol() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Trade.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Trade.symbol)
}

// string price = 4;
inline void Trade::clear_price() {
  price_.ClearToEmpty();
}
inline const std::string& Trade::price() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Trade.price)
  return _internal_price();
}
inline void Trade::set_price(const std::string& value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Trade.price)
}
inline std::string* Trade::mutable_price() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Trade.price)
  return _internal_mutable_price();
}
inline const std::string& Trade::_internal_price() const {
  return price_.Get();
}
inline void Trade::_internal_set_price(const std::string& value) {
  
  price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_price(std::string&& value) {
  
  price_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Trade.price)
}
inline void Trade::set_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Trade.price)
}
inline void Trade::set_price(const char* value,
    size_t size) {
  
  price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Trade.price)
}
inline std::string* Trade::_internal_mutable_price() {
  
  return price_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_price() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Trade.price)
  return price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Trade.price)
}

// string volume = 5;
inline void Trade::clear_volume() {
  volume_.ClearToEmpty();
}
inline const std::string& Trade::volume() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Trade.volume)
  return _internal_volume();
}
inline void Trade::set_volume(const std::string& value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Trade.volume)
}
inline std::string* Trade::mutable_volume() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Trade.volume)
  return _internal_mutable_volume();
}
inline const std::string& Trade::_internal_volume() const {
  return volume_.Get();
}
inline void Trade::_internal_set_volume(const std::string& value) {
  
  volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Trade::set_volume(std::string&& value) {
  
  volume_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Trade.volume)
}
inline void Trade::set_volume(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Trade.volume)
}
inline void Trade::set_volume(const char* value,
    size_t size) {
  
  volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Trade.volume)
}
inline std::string* Trade::_internal_mutable_volume() {
  
  return volume_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Trade::release_volume() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Trade.volume)
  return volume_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trade::set_allocated_volume(std::string* volume) {
  if (volume != nullptr) {
    
  } else {
    
  }
  volume_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Trade.volume)
}

// uint64 sequence = 6;
inline void Trade::clear_sequence() {
  sequence_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Trade::sequence() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Trade.sequence)
  return _internal_sequence();
}
inline void Trade::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_ = value;
}
inline void Trade::set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Trade.sequence)
}

// -------------------------------------------------------------------

// Kline

// .google.protobuf.Timestamp timestamp = 1;
inline bool Kline::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool Kline::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Kline::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Kline::timestamp() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Kline.timestamp)
  return _internal_timestamp();
}
inline void Kline::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto3.MarketData.Kline.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Kline::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Kline::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Kline.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Kline::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Kline::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Kline.timestamp)
  return _internal_mutable_timestamp();
}
inline void Kline::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Kline.timestamp)
}

// string exchange = 2;
inline void Kline::clear_exchange() {
  exchange_.ClearToEmpty();
}
inline const std::string& Kline::exchange() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Kline.exchange)
  return _internal_exchange();
}
inline void Kline::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Kline.exchange)
}
inline std::string* Kline::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Kline.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& Kline::_internal_exchange() const {
  return exchange_.Get();
}
inline void Kline::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Kline::set_exchange(std::string&& value) {
  
  exchange_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Kline.exchange)
}
inline void Kline::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Kline.exchange)
}
inline void Kline::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Kline.exchange)
}
inline std::string* Kline::_internal_mutable_exchange() {
  
  return exchange_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Kline::release_exchange() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Kline.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Kline::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Kline.exchange)
}

// string symbol = 3;
inline void Kline::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& Kline::symbol() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Kline.symbol)
  return _internal_symbol();
}
inline void Kline::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Kline.symbol)
}
inline std::string* Kline::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Kline.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& Kline::_internal_symbol() const {
  return symbol_.Get();
}
inline void Kline::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Kline::set_symbol(std::string&& value) {
  
  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Kline.symbol)
}
inline void Kline::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Kline.symbol)
}
inline void Kline::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Kline.symbol)
}
inline std::string* Kline::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Kline::release_symbol() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Kline.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Kline::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Kline.symbol)
}

// string open = 4;
inline void Kline::clear_open() {
  open_.ClearToEmpty();
}
inline const std::string& Kline::open() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Kline.open)
  return _internal_open();
}
inline void Kline::set_open(const std::string& value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Kline.open)
}
inline std::string* Kline::mutable_open() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Kline.open)
  return _internal_mutable_open();
}
inline const std::string& Kline::_internal_open() const {
  return open_.Get();
}
inline void Kline::_internal_set_open(const std::string& value) {
  
  open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Kline::set_open(std::string&& value) {
  
  open_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Kline.open)
}
inline void Kline::set_open(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Kline.open)
}
inline void Kline::set_open(const char* value,
    size_t size) {
  
  open_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Kline.open)
}
inline std::string* Kline::_internal_mutable_open() {
  
  return open_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Kline::release_open() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Kline.open)
  return open_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Kline::set_allocated_open(std::string* open) {
  if (open != nullptr) {
    
  } else {
    
  }
  open_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), open,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Kline.open)
}

// string high = 5;
inline void Kline::clear_high() {
  high_.ClearToEmpty();
}
inline const std::string& Kline::high() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Kline.high)
  return _internal_high();
}
inline void Kline::set_high(const std::string& value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Kline.high)
}
inline std::string* Kline::mutable_high() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Kline.high)
  return _internal_mutable_high();
}
inline const std::string& Kline::_internal_high() const {
  return high_.Get();
}
inline void Kline::_internal_set_high(const std::string& value) {
  
  high_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Kline::set_high(std::string&& value) {
  
  high_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Kline.high)
}
inline void Kline::set_high(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  high_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Kline.high)
}
inline void Kline::set_high(const char* value,
    size_t size) {
  
  high_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Kline.high)
}
inline std::string* Kline::_internal_mutable_high() {
  
  return high_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Kline::release_high() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Kline.high)
  return high_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Kline::set_allocated_high(std::string* high) {
  if (high != nullptr) {
    
  } else {
    
  }
  high_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), high,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Kline.high)
}

// string low = 6;
inline void Kline::clear_low() {
  low_.ClearToEmpty();
}
inline const std::string& Kline::low() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Kline.low)
  return _internal_low();
}
inline void Kline::set_low(const std::string& value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Kline.low)
}
inline std::string* Kline::mutable_low() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Kline.low)
  return _internal_mutable_low();
}
inline const std::string& Kline::_internal_low() const {
  return low_.Get();
}
inline void Kline::_internal_set_low(const std::string& value) {
  
  low_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Kline::set_low(std::string&& value) {
  
  low_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Kline.low)
}
inline void Kline::set_low(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  low_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Kline.low)
}
inline void Kline::set_low(const char* value,
    size_t size) {
  
  low_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Kline.low)
}
inline std::string* Kline::_internal_mutable_low() {
  
  return low_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Kline::release_low() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Kline.low)
  return low_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Kline::set_allocated_low(std::string* low) {
  if (low != nullptr) {
    
  } else {
    
  }
  low_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), low,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Kline.low)
}

// string close = 7;
inline void Kline::clear_close() {
  close_.ClearToEmpty();
}
inline const std::string& Kline::close() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Kline.close)
  return _internal_close();
}
inline void Kline::set_close(const std::string& value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Kline.close)
}
inline std::string* Kline::mutable_close() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Kline.close)
  return _internal_mutable_close();
}
inline const std::string& Kline::_internal_close() const {
  return close_.Get();
}
inline void Kline::_internal_set_close(const std::string& value) {
  
  close_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Kline::set_close(std::string&& value) {
  
  close_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Kline.close)
}
inline void Kline::set_close(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  close_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Kline.close)
}
inline void Kline::set_close(const char* value,
    size_t size) {
  
  close_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Kline.close)
}
inline std::string* Kline::_internal_mutable_close() {
  
  return close_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Kline::release_close() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Kline.close)
  return close_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Kline::set_allocated_close(std::string* close) {
  if (close != nullptr) {
    
  } else {
    
  }
  close_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), close,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Kline.close)
}

// string volume = 8;
inline void Kline::clear_volume() {
  volume_.ClearToEmpty();
}
inline const std::string& Kline::volume() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Kline.volume)
  return _internal_volume();
}
inline void Kline::set_volume(const std::string& value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Kline.volume)
}
inline std::string* Kline::mutable_volume() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Kline.volume)
  return _internal_mutable_volume();
}
inline const std::string& Kline::_internal_volume() const {
  return volume_.Get();
}
inline void Kline::_internal_set_volume(const std::string& value) {
  
  volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Kline::set_volume(std::string&& value) {
  
  volume_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Kline.volume)
}
inline void Kline::set_volume(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Kline.volume)
}
inline void Kline::set_volume(const char* value,
    size_t size) {
  
  volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Kline.volume)
}
inline std::string* Kline::_internal_mutable_volume() {
  
  return volume_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Kline::release_volume() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Kline.volume)
  return volume_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Kline::set_allocated_volume(std::string* volume) {
  if (volume != nullptr) {
    
  } else {
    
  }
  volume_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Kline.volume)
}

// string value = 9;
inline void Kline::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Kline::value() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Kline.value)
  return _internal_value();
}
inline void Kline::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Kline.value)
}
inline std::string* Kline::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Kline.value)
  return _internal_mutable_value();
}
inline const std::string& Kline::_internal_value() const {
  return value_.Get();
}
inline void Kline::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Kline::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Kline.value)
}
inline void Kline::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Kline.value)
}
inline void Kline::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Kline.value)
}
inline std::string* Kline::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Kline::release_value() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Kline.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Kline::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Kline.value)
}

// uint32 resolution = 10;
inline void Kline::clear_resolution() {
  resolution_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Kline::_internal_resolution() const {
  return resolution_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Kline::resolution() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Kline.resolution)
  return _internal_resolution();
}
inline void Kline::_internal_set_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  resolution_ = value;
}
inline void Kline::set_resolution(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Kline.resolution)
}

// uint64 sequence = 11;
inline void Kline::clear_sequence() {
  sequence_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Kline::sequence() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Kline.sequence)
  return _internal_sequence();
}
inline void Kline::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_ = value;
}
inline void Kline::set_sequence(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Kline.sequence)
}

// string lastvolume = 12;
inline void Kline::clear_lastvolume() {
  lastvolume_.ClearToEmpty();
}
inline const std::string& Kline::lastvolume() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.Kline.lastvolume)
  return _internal_lastvolume();
}
inline void Kline::set_lastvolume(const std::string& value) {
  _internal_set_lastvolume(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.Kline.lastvolume)
}
inline std::string* Kline::mutable_lastvolume() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.Kline.lastvolume)
  return _internal_mutable_lastvolume();
}
inline const std::string& Kline::_internal_lastvolume() const {
  return lastvolume_.Get();
}
inline void Kline::_internal_set_lastvolume(const std::string& value) {
  
  lastvolume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Kline::set_lastvolume(std::string&& value) {
  
  lastvolume_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.Kline.lastvolume)
}
inline void Kline::set_lastvolume(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lastvolume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.Kline.lastvolume)
}
inline void Kline::set_lastvolume(const char* value,
    size_t size) {
  
  lastvolume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.Kline.lastvolume)
}
inline std::string* Kline::_internal_mutable_lastvolume() {
  
  return lastvolume_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Kline::release_lastvolume() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.Kline.lastvolume)
  return lastvolume_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Kline::set_allocated_lastvolume(std::string* lastvolume) {
  if (lastvolume != nullptr) {
    
  } else {
    
  }
  lastvolume_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastvolume,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.Kline.lastvolume)
}

// -------------------------------------------------------------------

// HistKlineData

// string symbol = 1;
inline void HistKlineData::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& HistKlineData::symbol() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.HistKlineData.symbol)
  return _internal_symbol();
}
inline void HistKlineData::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.HistKlineData.symbol)
}
inline std::string* HistKlineData::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.HistKlineData.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& HistKlineData::_internal_symbol() const {
  return symbol_.Get();
}
inline void HistKlineData::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HistKlineData::set_symbol(std::string&& value) {
  
  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.HistKlineData.symbol)
}
inline void HistKlineData::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.HistKlineData.symbol)
}
inline void HistKlineData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.HistKlineData.symbol)
}
inline std::string* HistKlineData::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HistKlineData::release_symbol() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.HistKlineData.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistKlineData::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.HistKlineData.symbol)
}

// string exchange = 2;
inline void HistKlineData::clear_exchange() {
  exchange_.ClearToEmpty();
}
inline const std::string& HistKlineData::exchange() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.HistKlineData.exchange)
  return _internal_exchange();
}
inline void HistKlineData::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.HistKlineData.exchange)
}
inline std::string* HistKlineData::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.HistKlineData.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& HistKlineData::_internal_exchange() const {
  return exchange_.Get();
}
inline void HistKlineData::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HistKlineData::set_exchange(std::string&& value) {
  
  exchange_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.HistKlineData.exchange)
}
inline void HistKlineData::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.HistKlineData.exchange)
}
inline void HistKlineData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.HistKlineData.exchange)
}
inline std::string* HistKlineData::_internal_mutable_exchange() {
  
  return exchange_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HistKlineData::release_exchange() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.HistKlineData.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistKlineData::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.HistKlineData.exchange)
}

// uint64 start_time = 3;
inline void HistKlineData::clear_start_time() {
  start_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistKlineData::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistKlineData::start_time() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.HistKlineData.start_time)
  return _internal_start_time();
}
inline void HistKlineData::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_ = value;
}
inline void HistKlineData::set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.HistKlineData.start_time)
}

// uint64 end_time = 4;
inline void HistKlineData::clear_end_time() {
  end_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistKlineData::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistKlineData::end_time() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.HistKlineData.end_time)
  return _internal_end_time();
}
inline void HistKlineData::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_time_ = value;
}
inline void HistKlineData::set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.HistKlineData.end_time)
}

// uint32 count = 5;
inline void HistKlineData::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HistKlineData::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HistKlineData::count() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.HistKlineData.count)
  return _internal_count();
}
inline void HistKlineData::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void HistKlineData::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.HistKlineData.count)
}

// uint32 frequency = 6;
inline void HistKlineData::clear_frequency() {
  frequency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HistKlineData::_internal_frequency() const {
  return frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HistKlineData::frequency() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.HistKlineData.frequency)
  return _internal_frequency();
}
inline void HistKlineData::_internal_set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frequency_ = value;
}
inline void HistKlineData::set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.HistKlineData.frequency)
}

// repeated .Proto3.MarketData.Kline kline_data = 7;
inline int HistKlineData::_internal_kline_data_size() const {
  return kline_data_.size();
}
inline int HistKlineData::kline_data_size() const {
  return _internal_kline_data_size();
}
inline void HistKlineData::clear_kline_data() {
  kline_data_.Clear();
}
inline ::Proto3::MarketData::Kline* HistKlineData::mutable_kline_data(int index) {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.HistKlineData.kline_data)
  return kline_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Kline >*
HistKlineData::mutable_kline_data() {
  // @@protoc_insertion_point(field_mutable_list:Proto3.MarketData.HistKlineData.kline_data)
  return &kline_data_;
}
inline const ::Proto3::MarketData::Kline& HistKlineData::_internal_kline_data(int index) const {
  return kline_data_.Get(index);
}
inline const ::Proto3::MarketData::Kline& HistKlineData::kline_data(int index) const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.HistKlineData.kline_data)
  return _internal_kline_data(index);
}
inline ::Proto3::MarketData::Kline* HistKlineData::_internal_add_kline_data() {
  return kline_data_.Add();
}
inline ::Proto3::MarketData::Kline* HistKlineData::add_kline_data() {
  // @@protoc_insertion_point(field_add:Proto3.MarketData.HistKlineData.kline_data)
  return _internal_add_kline_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3::MarketData::Kline >&
HistKlineData::kline_data() const {
  // @@protoc_insertion_point(field_list:Proto3.MarketData.HistKlineData.kline_data)
  return kline_data_;
}

// -------------------------------------------------------------------

// EmptyReq

// -------------------------------------------------------------------

// EmptyRsp

// -------------------------------------------------------------------

// ReqHishKlineInfo

// string symbol = 1;
inline void ReqHishKlineInfo::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& ReqHishKlineInfo::symbol() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.ReqHishKlineInfo.symbol)
  return _internal_symbol();
}
inline void ReqHishKlineInfo::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.ReqHishKlineInfo.symbol)
}
inline std::string* ReqHishKlineInfo::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.ReqHishKlineInfo.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& ReqHishKlineInfo::_internal_symbol() const {
  return symbol_.Get();
}
inline void ReqHishKlineInfo::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReqHishKlineInfo::set_symbol(std::string&& value) {
  
  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.ReqHishKlineInfo.symbol)
}
inline void ReqHishKlineInfo::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.ReqHishKlineInfo.symbol)
}
inline void ReqHishKlineInfo::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.ReqHishKlineInfo.symbol)
}
inline std::string* ReqHishKlineInfo::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReqHishKlineInfo::release_symbol() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.ReqHishKlineInfo.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqHishKlineInfo::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.ReqHishKlineInfo.symbol)
}

// string exchange = 2;
inline void ReqHishKlineInfo::clear_exchange() {
  exchange_.ClearToEmpty();
}
inline const std::string& ReqHishKlineInfo::exchange() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.ReqHishKlineInfo.exchange)
  return _internal_exchange();
}
inline void ReqHishKlineInfo::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.ReqHishKlineInfo.exchange)
}
inline std::string* ReqHishKlineInfo::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.ReqHishKlineInfo.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& ReqHishKlineInfo::_internal_exchange() const {
  return exchange_.Get();
}
inline void ReqHishKlineInfo::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReqHishKlineInfo::set_exchange(std::string&& value) {
  
  exchange_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.ReqHishKlineInfo.exchange)
}
inline void ReqHishKlineInfo::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.ReqHishKlineInfo.exchange)
}
inline void ReqHishKlineInfo::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.ReqHishKlineInfo.exchange)
}
inline std::string* ReqHishKlineInfo::_internal_mutable_exchange() {
  
  return exchange_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReqHishKlineInfo::release_exchange() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.ReqHishKlineInfo.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqHishKlineInfo::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.ReqHishKlineInfo.exchange)
}

// uint64 start_time = 3;
inline void ReqHishKlineInfo::clear_start_time() {
  start_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqHishKlineInfo::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqHishKlineInfo::start_time() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.ReqHishKlineInfo.start_time)
  return _internal_start_time();
}
inline void ReqHishKlineInfo::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_ = value;
}
inline void ReqHishKlineInfo::set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.ReqHishKlineInfo.start_time)
}

// uint64 end_time = 4;
inline void ReqHishKlineInfo::clear_end_time() {
  end_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqHishKlineInfo::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqHishKlineInfo::end_time() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.ReqHishKlineInfo.end_time)
  return _internal_end_time();
}
inline void ReqHishKlineInfo::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_time_ = value;
}
inline void ReqHishKlineInfo::set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.ReqHishKlineInfo.end_time)
}

// uint32 count = 5;
inline void ReqHishKlineInfo::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqHishKlineInfo::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqHishKlineInfo::count() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.ReqHishKlineInfo.count)
  return _internal_count();
}
inline void ReqHishKlineInfo::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void ReqHishKlineInfo::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.ReqHishKlineInfo.count)
}

// uint32 frequency = 6;
inline void ReqHishKlineInfo::clear_frequency() {
  frequency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqHishKlineInfo::_internal_frequency() const {
  return frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqHishKlineInfo::frequency() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.ReqHishKlineInfo.frequency)
  return _internal_frequency();
}
inline void ReqHishKlineInfo::_internal_set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frequency_ = value;
}
inline void ReqHishKlineInfo::set_frequency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.ReqHishKlineInfo.frequency)
}

// -------------------------------------------------------------------

// ReqTradeInfo

// string symbol = 1;
inline void ReqTradeInfo::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& ReqTradeInfo::symbol() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.ReqTradeInfo.symbol)
  return _internal_symbol();
}
inline void ReqTradeInfo::set_symbol(const std::string& value) {
  _internal_set_symbol(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.ReqTradeInfo.symbol)
}
inline std::string* ReqTradeInfo::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.ReqTradeInfo.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& ReqTradeInfo::_internal_symbol() const {
  return symbol_.Get();
}
inline void ReqTradeInfo::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReqTradeInfo::set_symbol(std::string&& value) {
  
  symbol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.ReqTradeInfo.symbol)
}
inline void ReqTradeInfo::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.ReqTradeInfo.symbol)
}
inline void ReqTradeInfo::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.ReqTradeInfo.symbol)
}
inline std::string* ReqTradeInfo::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReqTradeInfo::release_symbol() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.ReqTradeInfo.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqTradeInfo::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.ReqTradeInfo.symbol)
}

// string exchange = 2;
inline void ReqTradeInfo::clear_exchange() {
  exchange_.ClearToEmpty();
}
inline const std::string& ReqTradeInfo::exchange() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.ReqTradeInfo.exchange)
  return _internal_exchange();
}
inline void ReqTradeInfo::set_exchange(const std::string& value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.ReqTradeInfo.exchange)
}
inline std::string* ReqTradeInfo::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:Proto3.MarketData.ReqTradeInfo.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& ReqTradeInfo::_internal_exchange() const {
  return exchange_.Get();
}
inline void ReqTradeInfo::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReqTradeInfo::set_exchange(std::string&& value) {
  
  exchange_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3.MarketData.ReqTradeInfo.exchange)
}
inline void ReqTradeInfo::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3.MarketData.ReqTradeInfo.exchange)
}
inline void ReqTradeInfo::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3.MarketData.ReqTradeInfo.exchange)
}
inline std::string* ReqTradeInfo::_internal_mutable_exchange() {
  
  return exchange_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReqTradeInfo::release_exchange() {
  // @@protoc_insertion_point(field_release:Proto3.MarketData.ReqTradeInfo.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReqTradeInfo::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3.MarketData.ReqTradeInfo.exchange)
}

// uint64 time = 3;
inline void ReqTradeInfo::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqTradeInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqTradeInfo::time() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.ReqTradeInfo.time)
  return _internal_time();
}
inline void ReqTradeInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void ReqTradeInfo::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.ReqTradeInfo.time)
}

// uint64 start_time = 5;
inline void ReqTradeInfo::clear_start_time() {
  start_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqTradeInfo::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqTradeInfo::start_time() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.ReqTradeInfo.start_time)
  return _internal_start_time();
}
inline void ReqTradeInfo::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_ = value;
}
inline void ReqTradeInfo::set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.ReqTradeInfo.start_time)
}

// uint64 end_time = 6;
inline void ReqTradeInfo::clear_end_time() {
  end_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqTradeInfo::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReqTradeInfo::end_time() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.ReqTradeInfo.end_time)
  return _internal_end_time();
}
inline void ReqTradeInfo::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_time_ = value;
}
inline void ReqTradeInfo::set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.ReqTradeInfo.end_time)
}

// uint32 count = 7;
inline void ReqTradeInfo::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqTradeInfo::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReqTradeInfo::count() const {
  // @@protoc_insertion_point(field_get:Proto3.MarketData.ReqTradeInfo.count)
  return _internal_count();
}
inline void ReqTradeInfo::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void ReqTradeInfo::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Proto3.MarketData.ReqTradeInfo.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MarketData
}  // namespace Proto3

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto
